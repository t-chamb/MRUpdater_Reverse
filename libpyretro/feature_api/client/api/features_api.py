# Source Generated with Decompyle++
# File: features_api.pyc (Python 3.10)

'''
    User-Facing Feature Flag API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
'''
import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated
from libpyretro.feature_api.client.models.user_features import UserFeatures
from libpyretro.feature_api.client.api_client import ApiClient, RequestSerialized
from libpyretro.feature_api.client.api_response import ApiResponse
from libpyretro.feature_api.client.rest import RESTResponseType

class FeaturesApi:
    '''NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    '''
    
    def __init__(self = None, api_client = None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    
    def get_available_features(self, _request_timeout = None, _request_auth = None, _content_type = validate_call, _headers = (None, None, None, None, 0), _host_index = ('_request_timeout', Union[(None, Annotated[(StrictFloat, Field(0, **('gt',)))], Tuple[(Annotated[(StrictFloat, Field(0, **('gt',)))], Annotated[(StrictFloat, Field(0, **('gt',)))])])], '_request_auth', Optional[Dict[(StrictStr, Any)]], '_content_type', Optional[StrictStr], '_headers', Optional[Dict[(StrictStr, Any)]], '_host_index', Annotated[(StrictInt, Field(0, 0, **('ge', 'le')))], 'return', UserFeatures)):
        '''get_available_features

        Get the features for a user.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        '''
        _param = self._get_available_features_serialize(_request_auth, _content_type, _headers, _host_index, **('_request_auth', '_content_type', '_headers', '_host_index'))
        _response_types_map = {
            '200': 'UserFeatures',
            '400': 'ErrorResponse' }
        # Incomplete decompilation - manual review needed
        pass
    get_available_features = None(get_available_features)
    
    def get_available_features_with_http_info(self, _request_timeout = None, _request_auth = None, _content_type = validate_call, _headers = (None, None, None, None, 0), _host_index = ('_request_timeout', Union[(None, Annotated[(StrictFloat, Field(0, **('gt',)))], Tuple[(Annotated[(StrictFloat, Field(0, **('gt',)))], Annotated[(StrictFloat, Field(0, **('gt',)))])])], '_request_auth', Optional[Dict[(StrictStr, Any)]], '_content_type', Optional[StrictStr], '_headers', Optional[Dict[(StrictStr, Any)]], '_host_index', Annotated[(StrictInt, Field(0, 0, **('ge', 'le')))], 'return', ApiResponse[UserFeatures])):
        '''get_available_features

        Get the features for a user.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        '''
        _param = self._get_available_features_serialize(_request_auth, _content_type, _headers, _host_index, **('_request_auth', '_content_type', '_headers', '_host_index'))
        _response_types_map = {
            '200': 'UserFeatures',
            '400': 'ErrorResponse' }
        # Incomplete decompilation - manual review needed
        pass
    get_available_features_with_http_info = None(get_available_features_with_http_info)
    
    def get_available_features_without_preload_content(self, _request_timeout = None, _request_auth = None, _content_type = validate_call, _headers = (None, None, None, None, 0), _host_index = ('_request_timeout', Union[(None, Annotated[(StrictFloat, Field(0, **('gt',)))], Tuple[(Annotated[(StrictFloat, Field(0, **('gt',)))], Annotated[(StrictFloat, Field(0, **('gt',)))])])], '_request_auth', Optional[Dict[(StrictStr, Any)]], '_content_type', Optional[StrictStr], '_headers', Optional[Dict[(StrictStr, Any)]], '_host_index', Annotated[(StrictInt, Field(0, 0, **('ge', 'le')))], 'return', RESTResponseType)):
        '''get_available_features

        Get the features for a user.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        '''
        _param = self._get_available_features_serialize(_request_auth, _content_type, _headers, _host_index, **('_request_auth', '_content_type', '_headers', '_host_index'))
        _response_types_map = {
            '200': 'UserFeatures',
            '400': 'ErrorResponse' }
        # Incomplete decompilation - manual review needed
        pass
    get_available_features_without_preload_content = None(get_available_features_without_preload_content)
    
    def _get_available_features_serialize(self, _request_auth = None, _content_type = None, _headers = None, _host_index = ('return', RequestSerialized)):
        _host = None
        _collection_formats = { }
        _path_params = { }
        _query_params = []
        if not _headers:
            pass
        _header_params = { }
        _form_params = []
        _files = { }
        _body_params = None
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept([
                'application/json'])
        _auth_settings = []
        return self.api_client.param_serialize('GET', '/user/features', _path_params, _query_params, _header_params, _body_params, _form_params, _files, _auth_settings, _collection_formats, _host, _request_auth, **('method', 'resource_path', 'path_params', 'query_params', 'header_params', 'body', 'post_params', 'files', 'auth_settings', 'collection_formats', '_host', '_request_auth'))


