# Source Generated with Decompyle++
# File: configuration.pyc (Python 3.10)

'''
    User-Facing Feature Flag API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
'''
import copy
from http.client import client as httplib
import logging
from logging import FileHandler
import multiprocessing
import sys
from typing import Any, ClassVar, Dict, List, Literal, Optional, TypedDict, Union
from typing_extensions import NotRequired, Self
import urllib3
JSON_SCHEMA_VALIDATION_KEYWORDS = {
    'maximum',
    'multipleOf',
    'exclusiveMinimum',
    'minLength',
    'maxItems',
    'minimum',
    'pattern',
    'exclusiveMaximum',
    'maxLength',
    'minItems'}
ServerVariablesT = Dict[(str, str)]
GenericAuthSetting = TypedDict('GenericAuthSetting', {
    'type': str,
    'in': str,
    'key': str,
    'value': str })
OAuth2AuthSetting = TypedDict('OAuth2AuthSetting', {
    'type': Literal['oauth2'],
    'in': Literal['header'],
    'key': Literal['Authorization'],
    'value': str })
APIKeyAuthSetting = TypedDict('APIKeyAuthSetting', {
    'type': Literal['api_key'],
    'in': str,
    'key': str,
    'value': Optional[str] })
BasicAuthSetting = TypedDict('BasicAuthSetting', {
    'type': Literal['basic'],
    'in': Literal['header'],
    'key': Literal['Authorization'],
    'value': Optional[str] })
BearerFormatAuthSetting = TypedDict('BearerFormatAuthSetting', {
    'type': Literal['bearer'],
    'in': Literal['header'],
    'format': Literal['JWT'],
    'key': Literal['Authorization'],
    'value': str })
BearerAuthSetting = TypedDict('BearerAuthSetting', {
    'type': Literal['bearer'],
    'in': Literal['header'],
    'key': Literal['Authorization'],
    'value': str })
HTTPSignatureAuthSetting = TypedDict('HTTPSignatureAuthSetting', {
    'type': Literal['http-signature'],
    'in': Literal['header'],
    'key': Literal['Authorization'],
    'value': None })
AuthSettings = TypedDict('AuthSettings', { }, False, **('total',))

class HostSettingVariable(TypedDict):
    enum_values: List[str] = 'HostSettingVariable'


class HostSetting(TypedDict):
    variables: NotRequired[Dict[(str, HostSettingVariable)]] = 'HostSetting'


class Configuration:
    '''This class contains various settings of the API client.

    :param host: Base url.
    :param ignore_operation_servers
      Boolean to ignore operation servers for the API client.
      Config will use `host` as the base url regardless of the operation servers.
    :param api_key: Dict to store API key(s).
      Each entry in the dict specifies an API key.
      The dict key is the name of the security scheme in the OAS specification.
      The dict value is the API key secret.
    :param api_key_prefix: Dict to store API prefix (e.g. Bearer).
      The dict key is the name of the security scheme in the OAS specification.
      The dict value is an API key prefix when generating the auth data.
    :param username: Username for HTTP basic authentication.
    :param password: Password for HTTP basic authentication.
    :param access_token: Access token.
    :param server_index: Index to servers configuration.
    :param server_variables: Mapping with string values to replace variables in
      templated server configuration. The validation of enums is performed for
      variables with defined enum values before.
    :param server_operation_index: Mapping from operation ID to an index to server
      configuration.
    :param server_operation_variables: Mapping from operation ID to a mapping with
      string values to replace variables in templated server configuration.
      The validation of enums is performed for variables with defined enum
      values before.
    :param ssl_ca_cert: str - the path to a file of concatenated CA certificates
      in PEM format.
    :param retries: Number of retries for API requests.
    :param ca_cert_data: verify the peer using concatenated CA certificate data
      in PEM (str) or DER (bytes) format.

    '''
    _default: ClassVar[Optional[Self]] = None
    
    def __init__(self, host, api_key, api_key_prefix, username, password, access_token, server_index, server_variables = None, server_operation_index = None, server_operation_variables = None, ignore_operation_servers = None, ssl_ca_cert = (None, None, None, None, None, None, None, None, None, None, False, None, None, None), retries = {
        'debug': None }, ca_cert_data = ('host', Optional[str], 'api_key', Optional[Dict[(str, str)]], 'api_key_prefix', Optional[Dict[(str, str)]], 'username', Optional[str], 'password', Optional[str], 'access_token', Optional[str], 'server_index', Optional[int], 'server_variables', Optional[ServerVariablesT], 'server_operation_index', Optional[Dict[(int, int)]], 'server_operation_variables', Optional[Dict[(int, ServerVariablesT)]], 'ignore_operation_servers', bool, 'ssl_ca_cert', Optional[str], 'retries', Optional[int], 'ca_cert_data', Optional[Union[(str, bytes)]], 'debug', Optional[bool], 'return', None), *, debug):
        '''Constructor
        '''
        self._base_path = 'http://localhost' if host is None else host
        self.server_index = 0 if server_index is None and host is None else server_index
        if not server_operation_index:
            pass
        self.server_operation_index = { }
        if not server_variables:
            pass
        self.server_variables = { }
        if not server_operation_variables:
            pass
        self.server_operation_variables = { }
        self.ignore_operation_servers = ignore_operation_servers
        self.temp_folder_path = None
        self.api_key = { }
        if api_key:
            self.api_key = api_key
        self.api_key_prefix = { }
        if api_key_prefix:
            self.api_key_prefix = api_key_prefix
        self.refresh_api_key_hook = None
        self.username = username
        self.password = password
        self.access_token = access_token
        self.logger = { }
        self.logger['package_logger'] = logging.getLogger('libpyretro.feature_api.client')
        self.logger['urllib3_logger'] = logging.getLogger('urllib3')
        self.logger_format = '%(asctime)s %(levelname)s %(message)s'
        self.logger_stream_handler = None
        self.logger_file_handler = None
        self.logger_file = None
        if debug is not None:
            self.debug = debug
        else:
            self._Configuration__debug = False
        self.verify_ssl = True
        self.ssl_ca_cert = ssl_ca_cert
        self.ca_cert_data = ca_cert_data
        self.cert_file = None
        self.key_file = None
        self.assert_hostname = None
        self.tls_server_name = None
        self.connection_pool_maxsize = multiprocessing.cpu_count() * 5
        self.proxy = None
        self.proxy_headers = None
        self.safe_chars_for_path_param = ''
        self.retries = retries
        self.client_side_validation = True
        self.socket_options = None
        self.datetime_format = '%Y-%m-%dT%H:%M:%S.%f%z'
        self.date_format = '%Y-%m-%d'

    
    def __deepcopy__(self = None, memo = None):
        cls = self.__class__
        result = cls.__new__(cls)
        memo[id(self)] = result
        for k, v in self.__dict__.items():
            if k not in ('logger', 'logger_file_handler'):
                setattr(result, k, copy.deepcopy(v, memo))
        result.logger = copy.copy(self.logger)
        result.logger_file = self.logger_file
        result.debug = self.debug
        return result

    
    def __setattr__(self = None, name = None, value = None):
        object.__setattr__(self, name, value)

    
    def set_default(cls = None, default = None):
        '''Set default instance of configuration.

        It stores default configuration, which can be
        returned by get_default_copy method.

        :param default: object of Configuration
        '''
        cls._default = default

    set_default = None(set_default)
    
    def get_default_copy(cls = None):
        '''Deprecated. Please use `get_default` instead.

        Deprecated. Please use `get_default` instead.

        :return: The configuration object.
        '''
        return cls.get_default()

    get_default_copy = None(get_default_copy)
    
    def get_default(cls = None):
        '''Return the default configuration.

        This method returns newly created, based on default constructor,
        object of Configuration class or returns a copy of default
        configuration.

        :return: The configuration object.
        '''
        if cls._default is None:
            cls._default = cls()
        return cls._default

    get_default = None(get_default)
    
    def logger_file(self = None):
        '''The logger file.

        If the logger_file is None, then add stream handler and remove file
        handler. Otherwise, add file handler and remove stream handler.

        :param value: The logger_file path.
        :type: str
        '''
        return self._Configuration__logger_file

    logger_file = None(logger_file)
    
    def logger_file(self = None, value = None):
        '''The logger file.

        If the logger_file is None, then add stream handler and remove file
        handler. Otherwise, add file handler and remove stream handler.

        :param value: The logger_file path.
        :type: str
        '''
        self._Configuration__logger_file = value
        if self._Configuration__logger_file:
            self.logger_file_handler = logging.FileHandler(self._Configuration__logger_file)
            self.logger_file_handler.setFormatter(self.logger_formatter)
            for _, logger in self.logger.items():
                logger.addHandler(self.logger_file_handler)
        return None

    logger_file = None(logger_file)
    
    def debug(self = None):
        '''Debug status

        :param value: The debug status, True or False.
        :type: bool
        '''
        return self._Configuration__debug

    debug = None(debug)
    
    def debug(self = None, value = None):
        '''Debug status

        :param value: The debug status, True or False.
        :type: bool
        '''
        self._Configuration__debug = value
        if self._Configuration__debug:
            for _, logger in self.logger.items():
                logger.setLevel(logging.DEBUG)
            httplib.HTTPConnection.debuglevel = 1
            return None
        for _, logger in None.logger.items():
            logger.setLevel(logging.WARNING)
        httplib.HTTPConnection.debuglevel = 0

    debug = None(debug)
    
    def logger_format(self = None):
        '''The logger format.

        The logger_formatter will be updated when sets logger_format.

        :param value: The format string.
        :type: str
        '''
        return self._Configuration__logger_format

    logger_format = None(logger_format)
    
    def logger_format(self = None, value = None):
        '''The logger format.

        The logger_formatter will be updated when sets logger_format.

        :param value: The format string.
        :type: str
        '''
        self._Configuration__logger_format = value
        self.logger_formatter = logging.Formatter(self._Configuration__logger_format)

    logger_format = None(logger_format)
    
    def get_api_key_with_prefix(self = None, identifier = None, alias = None):
        '''Gets API key (with prefix if set).

        :param identifier: The identifier of apiKey.
        :param alias: The alternative identifier of apiKey.
        :return: The token for api key authentication.
        '''
        if self.refresh_api_key_hook is not None:
            self.refresh_api_key_hook(self)
        key = self.api_key.get(identifier, self.api_key.get(alias) if alias is not None else None)
        if key:
            prefix = self.api_key_prefix.get(identifier)
            if prefix:
                return '%s %s' % (prefix, key)
            return None

    
    def get_basic_auth_token(self = None):
        '''Gets HTTP basic authentication header (string).

        :return: The token for basic HTTP authentication.
        '''
        username = ''
        if self.username is not None:
            username = self.username
        password = ''
        if self.password is not None:
            password = self.password
        return urllib3.util.make_headers(username + ':' + password, **('basic_auth',)).get('authorization')

    
    def auth_settings(self = None):
        '''Gets Auth Settings dict for api client.

        :return: The Auth Settings information dict.
        '''
        auth = { }
        return auth

    
    def to_debug_report(self = None):
        '''Gets the essential information for debugging.

        :return: The report for debugging.
        '''
        return 'Python SDK Debug Report:\nOS: {env}\nPython Version: {pyversion}\nVersion of the API: 0.0.1\nSDK Package Version: 1.0.0'.format(sys.platform, sys.version, **('env', 'pyversion'))

    
    def get_host_settings(self = None):
        '''Gets an array of host settings

        :return: An array of host settings
        '''
        return [
            {
                'url': '',
                'description': 'No description provided' }]

    
    def get_host_from_settings(self = None, index = None, variables = None, servers = (None, None)):
        '''Gets host URL based on the index and variables
        :param index: array index of the host settings
        :param variables: hash of variable and the corresponding value
        :param servers: an array of host settings or None
        :return: URL based on host settings
        '''
        if index is None:
            return self._base_path
        variables = { } if None is None else variables
        servers = self.get_host_settings() if servers is None else servers
        # Assignment completed
    def host(self = None):
        '''Return generated host.'''
        return self.get_host_from_settings(self.server_index, self.server_variables, **('variables',))

    host = None(host)
    
    def host(self = None, value = None):
        '''Fix base path.'''
        self._base_path = value
        self.server_index = None

    host = None(host)

