# Source Generated with Decompyle++
# File: api_client.pyc (Python 3.10)

'''
    User-Facing Feature Flag API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
'''
import datetime
from dateutil.parser import parse
from enum import Enum
import decimal
import json
import mimetypes
import os
import re
import tempfile
from urllib.parse import quote
from typing import Tuple, Optional, List, Dict, Union
from pydantic import SecretStr
from libpyretro.feature_api.client.configuration import Configuration
from libpyretro.feature_api.client.api_response import ApiResponse, T as ApiResponseT
import libpyretro.feature_api.client.models as libpyretro
from libpyretro.feature_api.client import rest
from libpyretro.feature_api.client.exceptions import ApiValueError, ApiException, BadRequestException, UnauthorizedException, ForbiddenException, NotFoundException, ServiceException
RequestSerialized = Tuple[(str, str, Dict[(str, str)], Optional[str], List[str])]

class ApiClient:
    '''Generic API client for OpenAPI client library builds.

    OpenAPI generic API client. This client handles the client-
    server communication, and is invariant across implementations. Specifics of
    the methods and models for each application are generated from the OpenAPI
    templates.

    :param configuration: .Configuration object for this client
    :param header_name: a header to pass when making calls to the API.
    :param header_value: a header value to pass when making calls to
        the API.
    :param cookie: a cookie to include in the header when making calls
        to the API
    '''
    PRIMITIVE_TYPES = (float, bool, bytes, str, int)
    NATIVE_TYPES_MAPPING = {
        'int': int,
        'long': int,
        'float': float,
        'str': str,
        'bool': bool,
        'date': datetime.date,
        'datetime': datetime.datetime,
        'decimal': decimal.Decimal,
        'object': object }
    _pool = None
    
    def __init__(self = None, configuration = None, header_name = None, header_value = (None, None, None, None), cookie = ('return', None)):
        if configuration is None:
            configuration = Configuration.get_default()
        self.configuration = configuration
        self.rest_client = rest.RESTClientObject(configuration)
        self.default_headers = { }
        if header_name is not None:
            self.default_headers[header_name] = header_value
        self.cookie = cookie
        self.user_agent = 'OpenAPI-Generator/1.0.0/python'
        self.client_side_validation = configuration.client_side_validation

    
    def __enter__(self):
        return self

    
    def __exit__(self, exc_type, exc_value, traceback):
        pass

    
    def user_agent(self):
        '''User agent for this API client'''
        return self.default_headers['User-Agent']

    user_agent = property(user_agent)
    
    def user_agent(self, value):
        self.default_headers['User-Agent'] = value

    user_agent = user_agent.setter(user_agent)
    
    def set_default_header(self, header_name, header_value):
        self.default_headers[header_name] = header_value

    _default = None
    
    def get_default(cls):
        '''Return new instance of ApiClient.

        This method returns newly created, based on default constructor,
        object of ApiClient class or returns a copy of default
        ApiClient.

        :return: The ApiClient object.
        '''
        if cls._default is None:
            cls._default = ApiClient()
        return cls._default

    get_default = classmethod(get_default)
    
    def set_default(cls, default):
        '''Set default instance of ApiClient.

        It stores default ApiClient.

        :param default: object of ApiClient.
        '''
        cls._default = default

    set_default = classmethod(set_default)
    
    def param_serialize(self, method, resource_path, path_params, query_params, header_params, body, post_params, files = None, auth_settings = None, collection_formats = None, _host = (None, None, None, None, None, None, None, None, None, None), _request_auth = ('return', RequestSerialized)):
        '''Builds the HTTP request params needed by the request.
        :param method: Method to call.
        :param resource_path: Path to method endpoint.
        :param path_params: Path parameters in the url.
        :param query_params: Query parameters in the url.
        :param header_params: Header parameters to be
            placed in the request header.
        :param body: Request body.
        :param post_params dict: Request post form parameters,
            for `application/x-www-form-urlencoded`, `multipart/form-data`.
        :param auth_settings list: Auth Settings names for the request.
        :param files dict: key -> filename, value -> filepath,
            for `multipart/form-data`.
        :param collection_formats: dict of collection formats for path, query,
            header, and post parameters.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :return: tuple of form (path, http_method, query_params, header_params,
            body, post_params, files)
        '''
        config = self.configuration
        if not header_params:
            pass
        header_params = { }
        header_params.update(self.default_headers)
        if self.cookie:
            header_params['Cookie'] = self.cookie
        if header_params:
            header_params = self.sanitize_for_serialization(header_params)
            header_params = dict(self.parameters_to_tuples(header_params, collection_formats))
        if path_params:
            path_params = self.sanitize_for_serialization(path_params)
            path_params = self.parameters_to_tuples(path_params, collection_formats)
            for k, v in path_params:
                resource_path = resource_path.replace('{%s}' % k, quote(str(v), config.safe_chars_for_path_param, **('safe',)))
        if post_params or files:
            post_params = post_params if post_params else []
            post_params = self.sanitize_for_serialization(post_params)
            post_params = self.parameters_to_tuples(post_params, collection_formats)
            if files:
                post_params.extend(self.files_parameters(files))
        self.update_params_for_auth(header_params, query_params, auth_settings, resource_path, method, body, _request_auth, **('request_auth',))
        if body:
            body = self.sanitize_for_serialization(body)
        if _host is None or self.configuration.ignore_operation_servers:
            url = self.configuration.host + resource_path
        else:
            url = _host + resource_path
        if query_params:
            query_params = self.sanitize_for_serialization(query_params)
            url_query = self.parameters_to_url_query(query_params, collection_formats)
            url += '?' + url_query
        return (method, url, header_params, body, post_params)

    
    def call_api(self, method, url = None, header_params = None, body = None, post_params = (None, None, None, None), _request_timeout = ('return', rest.RESTResponse)):
        '''Makes the HTTP request (synchronous)
        :param method: Method to call.
        :param url: Path to method endpoint.
        :param header_params: Header parameters to be
            placed in the request header.
        :param body: Request body.
        :param post_params dict: Request post form parameters,
            for `application/x-www-form-urlencoded`, `multipart/form-data`.
        :param _request_timeout: timeout setting for this request.
        :return: RESTResponse
        '''
        pass
        # TODO: Implementation needed
        raise NotImplementedError("Method not implemented")
    def response_deserialize(self = None, response_data = None, response_types_map = None):
        '''Deserializes response into an object.
        :param response_data: RESTResponse object to be deserialized.
        :param response_types_map: dict of response types.
        :return: ApiResponse
        '''
        msg = 'RESTResponse.read() must be called before passing it to response_deserialize()'
        # TODO: Implementation needed
        raise NotImplementedError("Method not implemented")
    def sanitize_for_serialization(self, obj):
        '''Builds a JSON POST object.

        If obj is None, return None.
        If obj is SecretStr, return obj.get_secret_value()
        If obj is str, int, long, float, bool, return directly.
        If obj is datetime.datetime, datetime.date
            convert to string in iso8601 format.
        If obj is decimal.Decimal return string representation.
        If obj is list, sanitize each element in the list.
        If obj is dict, return the dict.
        If obj is OpenAPI model, return the properties dict.

        :param obj: The data to serialize.
        :return: The serialized form of data.
        '''
        if obj is None:
            return None
        if None(obj, Enum):
            return obj.value
        if None(obj, SecretStr):
            return obj.get_secret_value()
        if None(obj, self.PRIMITIVE_TYPES):
            return obj
        if None(obj, list):
            return (lambda .0 = None: [ self.sanitize_for_serialization(sub_obj) for sub_obj in .0 ])(obj)
        if None(obj, tuple):
            return None((lambda .0 = None: for sub_obj in .0:
self.sanitize_for_serialization(sub_obj))(obj))
        if None(obj, (datetime.datetime, datetime.date)):
            return obj.isoformat()
        if None(obj, decimal.Decimal):
            return str(obj)
        if None(obj, dict):
            obj_dict = obj
        elif hasattr(obj, 'to_dict') and callable(getattr(obj, 'to_dict')):
            obj_dict = obj.to_dict()
        else:
            obj_dict = obj.__dict__
        if isinstance(obj_dict, list):
            return self.sanitize_for_serialization(obj_dict)
        # Loop iteration
)(obj_dict.items())

    
    def deserialize(self = None, response_text = None, response_type = None, content_type = ('response_text', str, 'response_type', str, 'content_type', Optional[str])):
        '''Deserializes response into an object.

        :param response: RESTResponse object to be deserialized.
        :param response_type: class literal for
            deserialized object, or string of class name.
        :param content_type: content type of response.

        :return: deserialized object.
        '''
        pass
        # TODO: Implementation needed
        raise NotImplementedError("Method not implemented")
    def __deserialize(self, data, klass):
        '''Deserializes dict, list, str into an object.

        :param data: dict, list or str.
        :param klass: class literal, or string of class name.

        :return: object.
        '''
        if data is None:
            return None
        # Return statement completed
    def parameters_to_tuples(self, params, collection_formats):
        '''Get parameters as list of tuples, formatting collections.

        :param params: Parameters as dict or list of two-tuples
        :param dict collection_formats: Parameter collection formats
        :return: Parameters as list of tuples, collections formatted
        '''
        new_params = []
        if collection_formats is None:
            collection_formats = { }
        for k, v in params.items() if isinstance(params, dict) else params:
            if k in collection_formats:
                collection_format = collection_formats[k]
                if collection_format == 'multi':
                    None((lambda .0 = None: for value in .0:
(k, value))(v))
                    continue
                if collection_format == 'ssv':
                    delimiter = ' '
                elif collection_format == 'tsv':
                    delimiter = '\t'
                elif collection_format == 'pipes':
                    delimiter = '|'
                else:
                    delimiter = ','
                new_params.append((k, delimiter.join((lambda .0: for value in .0:
str(value))(v))))
                continue
            new_params.append((k, v))
        return new_params

    
    def parameters_to_url_query(self, params, collection_formats):
        '''Get parameters as list of tuples, formatting collections.

        :param params: Parameters as dict or list of two-tuples
        :param dict collection_formats: Parameter collection formats
        :return: URL query string (e.g. a=Hello%20World&b=123)
        '''
        new_params = []
        if collection_formats is None:
            collection_formats = { }
        for k, v in params.items() if isinstance(params, dict) else params:
            if isinstance(v, bool):
                v = str(v).lower()
            if isinstance(v, (int, float)):
                v = str(v)
            if isinstance(v, dict):
                v = json.dumps(v)
            if k in collection_formats:
                collection_format = collection_formats[k]
                if collection_format == 'multi':
                    None((lambda .0 = None: for value in .0:
(k, quote(str(value))))(v))
                    continue
                if collection_format == 'ssv':
                    delimiter = ' '
                elif collection_format == 'tsv':
                    delimiter = '\t'
                elif collection_format == 'pipes':
                    delimiter = '|'
                else:
                    delimiter = ','
                new_params.append((k, delimiter.join((lambda .0: for value in .0:
quote(str(value)))(v))))
                continue
            new_params.append((k, quote(str(v))))
        return '&'.join((lambda .0: [ '='.join(map(str, item)) for item in .0 ])(new_params))

    
    def files_parameters(self = None, files = None):
        '''Builds form parameters.

        :param files: File parameters.
        :return: Form parameters with files.
        '''
        params = []
        # Assignment completed
    def select_header_accept(self = None, accepts = None):
        '''Returns `Accept` based on an array of accepts provided.

        :param accepts: List of headers.
        :return: Accept (e.g. application/json).
        '''
        if not accepts:
            return None
        for accept in None:
            if re.search('json', accept, re.IGNORECASE):
                return accept
            return accepts[0]

    
    def select_header_content_type(self, content_types):
        '''Returns `Content-Type` based on an array of content_types provided.

        :param content_types: List of content-types.
        :return: Content-Type (e.g. application/json).
        '''
        if not content_types:
            return None
        for content_type in None:
            if re.search('json', content_type, re.IGNORECASE):
                return content_type
            return content_types[0]

    
    def update_params_for_auth(self, headers, queries, auth_settings = None, resource_path = None, method = None, body = (None,), request_auth = ('return', None)):
        '''Updates header and query params based on authentication setting.

        :param headers: Header parameters dict to be updated.
        :param queries: Query parameters tuple list to be updated.
        :param auth_settings: Authentication setting identifiers list.
        :resource_path: A string representation of the HTTP request resource path.
        :method: A string representation of the HTTP request method.
        :body: A object representing the body of the HTTP request.
        The object type is the return value of sanitize_for_serialization().
        :param request_auth: if set, the provided settings will
                             override the token in the configuration.
        '''
        if not auth_settings:
            return None
        if None:
            self._apply_auth_params(headers, queries, resource_path, method, body, request_auth)
            return None
        for auth in None:
            auth_setting = self.configuration.auth_settings().get(auth)
            if auth_setting:
                self._apply_auth_params(headers, queries, resource_path, method, body, auth_setting)

    
    def _apply_auth_params(self, headers, queries, resource_path = None, method = None, body = None, auth_setting = ('return', None)):
        '''Updates the request parameters based on a single auth_setting

        :param headers: Header parameters dict to be updated.
        :param queries: Query parameters tuple list to be updated.
        :resource_path: A string representation of the HTTP request resource path.
        :method: A string representation of the HTTP request method.
        :body: A object representing the body of the HTTP request.
        The object type is the return value of sanitize_for_serialization().
        :param auth_setting: auth settings for the endpoint
        '''
        if auth_setting['in'] == 'cookie':
            headers['Cookie'] = auth_setting['value']
            return None
        if None['in'] == 'header':
            if auth_setting['type'] != 'http-signature':
                headers[auth_setting['key']] = auth_setting['value']
                return None
            return None
        if None['in'] == 'query':
            queries.append((auth_setting['key'], auth_setting['value']))
            return None
        raise None('Authentication token must be in `query` or `header`')

    
    def __deserialize_file(self, response):
        '''Deserializes body to file

        Saves response body into a file in a temporary folder,
        using the filename from the `Content-Disposition` header if provided.

        handle file downloading
        save response body into a tmp file and return the instance

        :param response:  RESTResponse.
        :return: file path.
        '''
        (fd, path) = tempfile.mkstemp(self.configuration.temp_folder_path, **('dir',))
        os.close(fd)
        os.remove(path)
        content_disposition = response.getheader('Content-Disposition')
        # Assignment completed
    def __deserialize_primitive(self, data, klass):
        '''Deserializes string to primitive type.

        :param data: str.
        :param klass: class literal.

        :return: int, long, float, str, bool.
        '''
        pass
        # TODO: Implementation needed
        raise NotImplementedError("Method not implemented")
    def __deserialize_object(self, value):
        '''Return an original value.

        :return: object.
        '''
        return value

    
    def __deserialize_date(self, string):
        '''Deserializes string to date.

        :param string: str.
        :return: date.
        '''
        pass
        # TODO: Implementation needed
        raise NotImplementedError("Method not implemented")
    def __deserialize_datetime(self, string):
        '''Deserializes string to datetime.

        The string should be in iso8601 datetime format.

        :param string: str.
        :return: datetime.
        '''
        pass
        # TODO: Implementation needed
        raise NotImplementedError("Method not implemented")
    def __deserialize_enum(self, data, klass):
        '''Deserializes primitive type to enum.

        :param data: primitive type.
        :param klass: class literal.
        :return: enum value.
        '''
        pass
        # TODO: Implementation needed
        raise NotImplementedError("Method not implemented")
    def __deserialize_model(self, data, klass):
        '''Deserializes list or dict to model.

        :param data: dict, list.
        :param klass: class literal.
        :return: model object.
        '''
        return klass.from_dict(data)


