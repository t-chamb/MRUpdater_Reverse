# Source Generated with Decompyle++
# File: error_response.pyc (Python 3.10)

'''
    User-Facing Feature Flag API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
'''
from __future__ import annotations
import pprint
import re
import json
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ErrorResponse(BaseModel):
    '''
    ErrorResponse
    '''
    error: 'Optional[StrictStr]' = Field(None, 'The error message.', **('default', 'description'))
    __properties: 'ClassVar[List[str]]' = [
        'error']
    model_config = ConfigDict(True, True, (), **('populate_by_name', 'validate_assignment', 'protected_namespaces'))
    
    def to_str(self = None):
        '''Returns the string representation of the model using alias'''
        return pprint.pformat(self.model_dump(True, **('by_alias',)))

    
    def to_json(self = None):
        '''Returns the JSON representation of the model using alias'''
        return json.dumps(self.to_dict())

    
    def from_json(cls = None, json_str = None):
        '''Create an instance of ErrorResponse from a JSON string'''
        return cls.from_dict(json.loads(json_str))

    from_json = None(from_json)
    
    def to_dict(self = None):
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields = set([])
        _dict = self.model_dump(True, excluded_fields, True, **('by_alias', 'exclude', 'exclude_none'))
        return _dict

    
    def from_dict(cls = None, obj = None):
        '''Create an instance of ErrorResponse from a dict'''
        if obj is None:
            return None
        if not None(obj, dict):
            return cls.model_validate(obj)
        _obj = None.model_validate({
            'error': obj.get('error') })
        return _obj

    from_dict = None(from_dict)

