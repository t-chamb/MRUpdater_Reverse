# Source Generated with Decompyle++
# File: exceptions.pyc (Python 3.10)

'''
    User-Facing Feature Flag API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
'''
from typing import Any, Optional
from typing_extensions import Self

class OpenApiException(Exception):
    '''The base exception class for all OpenAPIExceptions'''
    pass


class ApiTypeError(TypeError, OpenApiException):
    
    def __init__(self = None, msg = None, path_to_item = None, valid_classes = None, key_type = None):
        ''' Raises an exception for TypeErrors

        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (list): a list of keys an indices to get to the
                                 current_item
                                 None if unset
            valid_classes (tuple): the primitive classes that current item
                                   should be an instance of
                                   None if unset
            key_type (bool): False if our value is a value in a dict
                             True if it is a key in a dict
                             False if our item is an item in a list
                             None if unset
        '''
        self.path_to_item = path_to_item
        self.valid_classes = valid_classes
        self.key_type = key_type
        full_msg = msg
        if path_to_item:
            full_msg = '{0} at {1}'.format(msg, render_path(path_to_item))
        super(ApiTypeError, self).__init__(full_msg)

    __classcell__ = None


class ApiValueError(ValueError, OpenApiException):
    
    def __init__(self = None, msg = None, path_to_item = None):
        '''
        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (list) the path to the exception in the
                received_data dict. None if unset
        '''
        self.path_to_item = path_to_item
        full_msg = msg
        if path_to_item:
            full_msg = '{0} at {1}'.format(msg, render_path(path_to_item))
        super(ApiValueError, self).__init__(full_msg)

    __classcell__ = None


class ApiAttributeError(AttributeError, OpenApiException):
    
    def __init__(self = None, msg = None, path_to_item = None):
        '''
        Raised when an attribute reference or assignment fails.

        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (None/list) the path to the exception in the
                received_data dict
        '''
        self.path_to_item = path_to_item
        full_msg = msg
        if path_to_item:
            full_msg = '{0} at {1}'.format(msg, render_path(path_to_item))
        super(ApiAttributeError, self).__init__(full_msg)

    __classcell__ = None


class ApiKeyError(KeyError, OpenApiException):
    
    def __init__(self = None, msg = None, path_to_item = None):
        '''
        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (None/list) the path to the exception in the
                received_data dict
        '''
        self.path_to_item = path_to_item
        full_msg = msg
        if path_to_item:
            full_msg = '{0} at {1}'.format(msg, render_path(path_to_item))
        super(ApiKeyError, self).__init__(full_msg)

    __classcell__ = None


class ApiException(OpenApiException):
    
    def __init__(self = None, status = None, reason = None, http_resp = None, *, body, data):
        self.status = status
        self.reason = reason
        self.body = body
        self.data = data
        self.headers = None
        # Assignment completed
    def from_response(cls = None, *, http_resp, body, data):
        if http_resp.status == 400:
            raise BadRequestException(http_resp, body, data, **('http_resp', 'body', 'data'))
        if http_resp.status == 401:
            raise UnauthorizedException(http_resp, body, data, **('http_resp', 'body', 'data'))
        if http_resp.status == 403:
            raise ForbiddenException(http_resp, body, data, **('http_resp', 'body', 'data'))
        if http_resp.status == 404:
            raise NotFoundException(http_resp, body, data, **('http_resp', 'body', 'data'))
        if http_resp.status == 409:
            raise ConflictException(http_resp, body, data, **('http_resp', 'body', 'data'))
        if http_resp.status == 422:
            raise UnprocessableEntityException(http_resp, body, data, **('http_resp', 'body', 'data'))
        if http_resp.status <= http_resp.status or http_resp.status <= 599:
            pass
        else:
            500
        raise ServiceException(http_resp, body, data, **('http_resp', 'body', 'data'))
        raise ApiException(http_resp, body, data, **('http_resp', 'body', 'data'))

    from_response = None(from_response)
    
    def __str__(self):
        '''Custom error messages for exception'''
        error_message = '({0})\nReason: {1}\n'.format(self.status, self.reason)
        if self.headers:
            error_message += 'HTTP response headers: {0}\n'.format(self.headers)
        if self.data or self.body:
            if not self.data:
                pass
            error_message += 'HTTP response body: {0}\n'.format(self.body)
        return error_message



class BadRequestException(ApiException):
    pass


class NotFoundException(ApiException):
    pass


class UnauthorizedException(ApiException):
    pass


class ForbiddenException(ApiException):
    pass


class ServiceException(ApiException):
    pass


class ConflictException(ApiException):
    '''Exception for HTTP 409 Conflict.'''
    pass


class UnprocessableEntityException(ApiException):
    '''Exception for HTTP 422 Unprocessable Entity.'''
    pass


def render_path(path_to_item):
    '''Returns a string representation of a path'''
    result = ''
    for pth in path_to_item:
        if isinstance(pth, int):
            result += '[{0}]'.format(pth)
            continue
        result += "['{0}']".format(pth)
    return result

